/* Cantor pair manipulation proctions */
/* t0 clobbered by pairing */
global t0;

/* NB If you change the pairing function, check the micro-optimisation in main() */
proc pair(out, in1, in2) {
    t0 = in1 + in2;
    out = in2 + (t0 * (t0 + 1)) / 2;
}

proc unpair(out1, out2, in) {
    t0 = 0;
    /* t1 = in; */ /* invariant: in = in[begin] - t0 * (t0 + 1) / 2 */
    while (in > t0) {
        t0 = t0 + 1;
        in = in - t0;
    }
    out2 = in;
    out1 = t0 - out2;
}

/*
    DET | MAJOR ( ph -> ps )
        | MINOR ph
        | ps

    GEN | FROM ph
        | A. x ph

    B1  ( ( ph -> ps ) -> ( ( ps -> ch ) -> ( ph -> ch ) ) )
    B2  ( ( -. ph -> ph ) -> ph )
    B3  ( ph -> ( -. ph -> ps ) )
    B4  ( A. x ( ph -> ps ) -> ( A. x ph -> A. x ps ) )
    B6a ( x = y -> A. z x = y /\ x e. y -> A. z x e. y )
            where x != z, y != z
    B6b ( A. x A. y ph -> A. y A. x ph )
    B6c ( E. x A. x ph -> ph )
    B7  E. x x = y
    B8a ( x = y -> ( x = z -> y = z ) )
    B8b ( x = y -> ( x e. z -> y e. z ) )
    B8c ( x = y -> ( z e. x -> z e. y ) )

    EXT ( A. 2 ( 2 e. 0 <-> 2 e. 1 ) -> 0 = 1 )
    REP ( A. 3. E. 1. A. 2 ( A. 1 ph -> 2 = 1 ) -> E. 1 A. 2 ( 2 e. 1 <-> E. 3 ( 3 e. 0 /\ A. 1 ph ) ) )
    POW E. 1 A. 2 ( A. 3 ( 3 e. 2 -> 3 e. 0 ) -> 2 e. 1 )
    UNI E. 1 A. 2 ( E. 3 ( 2 e. 3 /\ 3 e. 0 ) -> 2 e. 1 )
    INF E. 1 ( 0 e. 1 /\ A. 0 ( 0 e. 1 -> E. 2 ( 2 e. 1 /\ A. 1 ( 1 e. 2 <-> 1 = 0 ) ) ) )
*/

global prooflist;
global nextproof;

global topwff;
global wffstack;

global proofcode;
global param1;
global param2;
global param3;

global t2;
global t3;
global t4;

proc pushwff() { pair(wffstack, topwff, wffstack); }
proc popwff() { unpair(topwff, wffstack, wffstack); }
proc v_0() { pushwff(); topwff = 0; }
proc v_1() { pushwff(); topwff = 1; }
proc v_2() { pushwff(); topwff = 2; }
proc v_3() { pushwff(); topwff = 3; }

proc par1() { pushwff(); topwff = param1; }
proc par2() { pushwff(); topwff = param2; }
proc par3() { pushwff(); topwff = param3; }

proc wim() { t2 = topwff; popwff(); pair(t2, topwff, t2); topwff = 1; pair(topwff, topwff, t2); }
proc wn() { t2 = topwff; topwff = 2; pair(topwff, topwff, t2); }
proc wal() { t2 = topwff; popwff(); pair(t2, topwff, t2); topwff = 3; pair(topwff, topwff, t2); }
proc weq() { t2 = topwff; popwff(); pair(t2, topwff, t2); topwff = 4; pair(topwff, topwff, t2); }
proc wel() { t2 = topwff; popwff(); pair(t2, topwff, t2); topwff = 5; pair(topwff, topwff, t2); }

proc wex() { wn(); wal(); wn(); }
proc wa() { wn(); wim(); wn(); }
proc wbi() {
    t3 = topwff; popwff(); pushwff(); t4 = topwff; topwff = t3;
    wim();
    pushwff(); topwff = t3; pushwff(); topwff = t4;
    wim(); wa();
}

proc select() {
    t2 = topwff; popwff();
    if (proofcode == 1) {
        topwff = t2;
    }
    proofcode = proofcode - 1;
}

proc main() {
    while (true) {
        topwff = 0;
        wffstack = 0;
        prooflist = nextproof;

        while (prooflist > 0) {
            unpair(proofcode, prooflist, prooflist);
            unpair(param1, prooflist, prooflist);
            unpair(param2, prooflist, prooflist);
            unpair(param3, prooflist, prooflist);

            v_0();

            /* DET */
            unpair(param3, wffstack, wffstack); /* minor premise ph */
            unpair(param2, wffstack, wffstack); /* major premise ( ph -> ps ) */ /* par1 = ps */
            par3(); par1(); wim();
            if (param2 != topwff) {
                param1 = 0;
            }
            topwff = param1; select();

            /* GEN */
            unpair(param3, wffstack, wffstack); /* ph */
            par1(); par3(); wal(); select();

            /* B1 */
            par1(); par2(); wim(); par2(); par3(); wim(); par1(); par3(); wim(); wim(); wim(); select();

            /* B2 */
            par1(); wn(); par1(); wim(); par1(); wim(); select();

            /* B3 */
            par1(); par1(); wn(); par2(); wim(); wim(); select();

            /* B4 */
            par1(); par2(); par3(); wim(); wal(); par1(); par2(); wal(); par1(); par3(); wal(); wim(); wim(); select();

            /* B6a */
            par1(); par2(); weq();  par3(); par1(); par2(); weq(); wal();  wim();
            par1(); par2(); wel();  par3(); par1(); par2(); wel(); wal();  wim(); wa();
            if (param3 == param1 || param3 == param2) {
                topwff = 0;
            }
            select();

            /* B6b */
            par1(); par2(); par3(); wal(); wal();  par2(); par1(); par3(); wal(); wal();  wim();  select();

            /* B6c */
            par1(); par1(); par2(); wal(); wex();  par2();  wim();  select();

            /* B7 */
            par1(); par1(); par2(); weq(); wex(); select();

            /* B8a */
            par1(); par2(); weq();  par1(); par3(); weq();  par2(); par3(); weq(); wim(); wim();  select();

            /* B8b */
            par1(); par2(); weq();  par1(); par3(); wel();  par2(); par3(); wel(); wim(); wim();  select();

            /* B8c */
            par1(); par2(); weq();  par3(); par1(); wel();  par3(); par2(); wel(); wim(); wim();  select();

            /* EXT */
            v_2();  v_2(); v_0(); wel();  v_2(); v_1(); wel(); wbi(); wal();  v_0(); v_1(); weq(); wim();  select();

            /* REP */
            v_3(); v_1(); v_2();  v_1(); par1(); wal(); v_2(); v_1(); weq(); wim();  wal(); wex(); wal();
            v_1(); v_2();  v_2(); v_1(); wel();  v_3();  v_3(); v_0(); wel(); v_1(); par1(); wal(); wa();  wex();  wbi(); wal(); wex();
            wim(); select();

            /* POW */
            v_1(); v_2();  v_3(); v_3(); v_2(); wel(); v_3(); v_0(); wel(); wim(); wal();  v_2(); v_1(); wel(); wim();  wal(); wex();  select();

            /* UNI */
            v_1(); v_2();  v_3(); v_2(); v_3(); wel(); v_3(); v_0(); wel(); wa(); wex();  v_2(); v_1(); wel(); wim();  wal(); wex();  select();

            /* INF */
            v_1(); v_0(); v_1(); wel();  v_0(); v_0(); v_1(); wel();  v_2(); v_2(); v_1(); wel();  v_1(); v_1(); v_2(); wel();
            v_1(); v_0(); weq(); wbi(); wal();  wa(); wex();  wim(); wal();  wa(); wex(); select();

            if (topwff == 1) {
                /* vacuously false wff proved, we're done */
                return;
            }
        }

        nextproof = nextproof + 1;
    }
}
