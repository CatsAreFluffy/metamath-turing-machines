/*
data Term = Lam Term | App Term Term | Var Int
type Env = [Value]
data Value = Closure Env Term | Reflect

eval :: Term -> Env -> Value
eval e (Lam x) = Closure e x
eval e (App f x) = vapp (eval e f) (eval e x)
eval e (Var n) = e !! n

vapp :: Value -> Value -> Value
vapp Reflect _ = Reflect
vapp (Closure e t) v = eval (v:e) t

quote :: Value -> ()
quote Reflect = ()
quote (Closure e t) = eval (Reflect:e) t

Data representations:
Lam t = (0,t)
App f x = (1,(f,x))
Var n = (2,n)
[] :: Env = 0
(x:xs) :: Env = (x,xs) (overlaps [] but that's fine)
Reflect = 0
Closure e t = (e,t)+1

Program stack entries:
0 = x -> quote x (and exit if x==0)
(0,e)+1 = t -> eval e t
(1,(e,x))+1 = f -> vapp f (eval e x)
(2,(e,t))+1 = x -> vapp (Closure e t) x

Reductions:
Reflect # 0 -> halt
(Closure e t) # 0 -> Reflect # (2,(e,t))+1 (-> t # (0,(0,e))+1)
(Lam t) # (0,e)+1 -> (Closure e t) #
(App f x) # (0,e)+1 -> f # (0,e)+1 (1,(e,x))+1
(Var n) # (0,e)+1 -> e!!n #
Reflect # (1,(e,x))+1 -> Reflect #
(Closure e t) # (1,(e',x))+1 -> x # (0,e')+1 (2,(e,t))+1
x # (2,(e,t))+1 -> t # (0,(x,e))+1
*/

/* Cantor pair manipulation proctions */
/* zeros in1, in2 */
proc pair(out, in1, in2) {
    builtin_pair(out, in1, in2);
}

proc pair_inc(out, in1, in2) {
    builtin_pair(out, in1, in2);
    out = out + 1;
}

/* zeros in */
proc unpair(out1, out2, in) {
    builtin_unpair(out1, out2, in);
}
proc unpair_dec(out1, out2, in) {
    in = in - 1;
    unpair(out1, out2, in);
}

global lstacktop;
global rstack;
global rstacktop;
global t2;
global t3;
global t4;

/* Stack manipulation */
proc rstack_push() {
    pair(rstack, rstack, rstacktop);
}

proc rstack_pop() {
    unpair(rstack, rstacktop, rstack);
}

/* Constructors for Term */
proc push_lam() {
    t2 = 0;
    pair(rstacktop, t2, rstacktop);
}

/* lstack=((...,x),f)->(...,App f x) */
proc push_app() {
    t2 = rstacktop;
    rstack_pop();
    pair(rstacktop, t2, rstacktop);
    t2 = t2 + 1;
    pair(rstacktop, t2, rstacktop);
}

proc push_var(v) {
    rstack_push();
    rstacktop = 2;
    pair(rstacktop, rstacktop, v);
}

/* e !! n */
proc index_list(e, n, out) {
    while(n > 0){
        unpair(out, e, e);
        n = n - 1;
    }
    unpair(out, e, e);
}

proc stackszero() {
    t2 = lstacktop;
    if(rstacktop > 0){
        t2 = t2 + 1;
    }
}

proc main() {
    /* first iteration? */
    stackszero();
    if(t2 == 0){
        /* push the program */
        push_var(t2); push_var(t2); push_app(); push_var(t2); push_var(t2); push_var(t2); t2 = t2 + 5; push_var(t2); t2 = t2 + 1; push_var(t2); t2 = t2 + 2; push_var(t2); t2 = t2 + 1; push_var(t2); push_app(); push_var(t2); push_app(); push_app(); push_lam(); push_lam(); push_lam(); push_lam(); push_app(); push_var(t2); push_lam(); push_app(); t2 = t2 + 14; push_var(t2); t2 = t2 + 1; push_var(t2); push_app(); push_var(t2); push_lam(); push_lam(); push_app(); push_app(); push_app(); push_lam(); push_lam(); push_lam(); push_lam(); push_app(); push_lam(); push_app(); push_var(t2); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); t2 = t2 + 1; push_var(t2); t2 = t2 + 2; push_var(t2); t2 = t2 + 7; push_var(t2); t2 = t2 + 3; push_var(t2); push_app(); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_var(t2); push_app(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); push_var(t2); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_lam(); push_app(); push_var(t2); push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); t2 = t2 + 1; push_var(t2); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); push_lam(); push_app(); push_var(t2); push_lam(); push_lam(); push_app(); push_lam(); push_app(); push_var(t2); push_app(); push_lam(); push_app(); push_var(t2); push_lam(); push_lam(); push_app(); push_app(); push_lam(); push_var(t2); push_var(t2); push_app(); push_lam(); push_var(t2); t2 = t2 + 6; push_var(t2); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 4; push_var(t2); t2 = t2 + 4; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); t2 = t2 + 2; push_var(t2); push_app(); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); t2 = t2 + 1; push_var(t2); t2 = t2 + 3; push_var(t2); t2 = t2 + 12; push_var(t2); t2 = t2 + 5; push_var(t2); push_app(); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_var(t2); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_lam(); push_lam(); push_lam(); push_var(t2); push_var(t2); t2 = t2 + 4; push_var(t2); push_app(); t2 = t2 + 6; push_var(t2); push_app(); push_lam(); push_app(); t2 = t2 + 11; push_var(t2); t2 = t2 + 7; push_var(t2); push_app(); push_app(); t2 = t2 + 11; push_var(t2); t2 = t2 + 6; push_var(t2); push_app(); push_app(); push_lam(); push_app(); push_app(); push_var(t2); push_lam(); push_app(); t2 = t2 + 6; push_var(t2); t2 = t2 + 2; push_var(t2); t2 = t2 + 19; push_var(t2); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 7; push_var(t2); push_app(); push_var(t2); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_lam(); push_lam(); push_lam(); push_var(t2); t2 = t2 + 9; push_var(t2); push_app(); t2 = t2 + 16; push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); t2 = t2 + 7; push_var(t2); push_app(); push_var(t2); push_var(t2); push_lam(); push_app(); push_var(t2); push_app(); push_lam(); push_app(); t2 = t2 + 2; push_var(t2); push_app(); push_app(); t2 = t2 + 16; push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); push_var(t2); push_lam(); push_app(); t2 = t2 + 2; push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); t2 = t2 + 13; push_var(t2); push_app(); t2 = t2 + 10; push_var(t2); push_app(); push_lam(); push_lam(); push_lam(); push_app(); push_app(); push_lam(); push_app(); push_app(); push_var(t2); push_lam(); push_app(); push_lam(); push_app(); push_var(t2); push_lam(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); push_var(t2); push_lam(); push_lam(); push_app(); push_var(t2); push_lam(); push_lam(); push_app(); t2 = t2 + 4; push_var(t2); push_var(t2); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_lam(); push_lam(); push_lam(); push_var(t2); t2 = t2 + 1; push_var(t2); push_app(); t2 = t2 + 4; push_var(t2); push_var(t2); push_lam(); push_app(); t2 = t2 + 15; push_var(t2); t2 = t2 + 1; push_var(t2); push_lam(); push_lam(); push_app(); t2 = t2 + 2; push_var(t2); push_app(); push_app(); t2 = t2 + 6; push_var(t2); push_app(); push_app(); t2 = t2 + 15; push_var(t2); t2 = t2 + 4; push_var(t2); push_app(); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 5; push_var(t2); push_app(); push_app(); push_lam(); push_app(); push_lam(); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); push_var(t2); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_lam(); push_lam(); push_lam(); push_var(t2); push_var(t2); t2 = t2 + 4; push_var(t2); push_app(); t2 = t2 + 6; push_var(t2); push_app(); push_lam(); push_app(); t2 = t2 + 11; push_var(t2); t2 = t2 + 3; push_var(t2); push_app(); push_app(); push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); push_lam(); push_app(); push_var(t2); push_app(); push_app(); push_var(t2); push_app(); push_app(); push_app(); push_app(); push_lam(); push_lam(); t2 = t2 + 3; push_var(t2); t2 = t2 + 3; push_var(t2); push_lam(); push_lam(); push_lam(); push_app(); t2 = t2 + 2; push_var(t2); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); push_lam(); push_app(); push_lam(); push_lam(); push_app(); push_app(); push_var(t2); push_lam(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_app(); push_lam(); t2 = t2 + 2; push_var(t2); push_var(t2); push_app(); push_app(); push_lam(); push_var(t2); push_var(t2); push_app(); push_lam(); push_var(t2); t2 = t2 + 2; push_var(t2); t2 = t2 + 11; push_var(t2); push_var(t2); push_app(); t2 = t2 + 5; push_var(t2); t2 = t2 + 2; push_var(t2); push_app(); push_app(); t2 = t2 + 9; push_var(t2); t2 = t2 + 1; push_var(t2); t2 = t2 + 10; push_var(t2); push_app(); push_lam(); push_lam(); push_app(); t2 = t2 + 12; push_var(t2); t2 = t2 + 9; push_var(t2); push_app(); t2 = t2 + 7; push_var(t2); push_app(); push_app(); t2 = t2 + 6; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_app(); push_lam(); push_app(); t2 = t2 + 2; push_var(t2); t2 = t2 + 1; push_var(t2); push_var(t2); t2 = t2 + 3; push_var(t2); push_app(); t2 = t2 + 14; push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); t2 = t2 + 4; push_var(t2); push_app(); push_var(t2); push_var(t2); push_lam(); push_app(); push_var(t2); push_app(); push_lam(); push_app(); push_app(); push_lam(); push_app(); t2 = t2 + 2; push_var(t2); push_app(); push_lam(); push_lam(); push_app(); push_var(t2); push_app(); push_var(t2); push_app(); push_lam(); t2 = t2 + 2; push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); t2 = t2 + 5; push_var(t2); push_app(); t2 = t2 + 4; push_var(t2); push_app(); push_lam(); push_lam(); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); t2 = t2 + 4; push_var(t2); t2 = t2 + 1; push_var(t2); push_app(); push_app(); t2 = t2 + 4; push_var(t2); push_var(t2); push_app(); push_app(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); push_lam(); push_app(); push_var(t2); push_var(t2); push_app(); push_lam(); t2 = t2 + 1; push_var(t2); t2 = t2 + 1; push_var(t2); t2 = t2 + 3; push_var(t2); t2 = t2 + 3; push_var(t2); push_app(); push_var(t2); push_app(); push_app(); t2 = t2 + 5; push_var(t2); push_app(); push_lam(); push_app(); push_var(t2); push_var(t2); t2 = t2 + 10; push_var(t2); t2 = t2 + 7; push_var(t2); push_app(); push_app(); push_lam(); push_lam(); push_lam(); push_lam(); push_app(); t2 = t2 + 7; push_var(t2); push_app(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); t2 = t2 + 5; push_var(t2); push_app(); push_var(t2); push_app(); push_lam(); push_app(); push_lam(); push_lam(); t2 = t2 + 3; push_var(t2); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_var(t2); push_app(); push_app(); push_lam(); push_lam(); push_lam(); push_lam(); push_var(t2); push_var(t2); push_app(); push_app(); push_lam(); push_app(); push_app(); push_lam(); t2 = t2 + 2; push_var(t2); t2 = t2 + 1; push_var(t2); t2 = t2 + 7; push_var(t2); push_app(); push_lam(); push_lam(); push_app(); t2 = t2 + 4; push_var(t2); push_app(); t2 = t2 + 3; push_var(t2); push_app(); push_lam(); push_lam(); push_lam(); push_lam(); push_lam(); push_lam(); push_app(); push_lam(); push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); push_var(t2); t2 = t2 + 1; push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); t2 = t2 + 2; push_var(t2); push_app(); push_lam(); push_lam(); push_lam(); push_app(); push_lam(); push_app(); push_lam(); t2 = t2 + 2; push_var(t2); push_var(t2); push_app(); push_app(); push_lam(); t2 = t2 + 3; push_var(t2); t2 = t2 + 1; push_var(t2); push_var(t2); push_app(); t2 = t2 + 2; push_var(t2); push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_app(); t2 = t2 + 2; push_var(t2); t2 = t2 + 1; push_var(t2); push_app(); push_var(t2); push_lam(); push_lam(); push_app(); push_app(); t2 = t2 + 2; push_var(t2); push_var(t2); push_app(); push_var(t2); push_lam(); push_lam(); push_app(); push_app(); push_lam(); push_lam(); push_app(); push_lam(); push_var(t2); push_var(t2); push_app(); push_lam(); t2 = t2 + 3; push_var(t2); t2 = t2 + 4; push_var(t2); t2 = t2 + 2; push_var(t2); t2 = t2 + 6; push_var(t2); push_var(t2); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_lam(); push_app(); push_lam(); push_lam(); push_app(); t2 = t2 + 3; push_var(t2); push_app(); t2 = t2 + 7; push_var(t2); t2 = t2 + 1; push_var(t2); push_app(); t2 = t2 + 7; push_var(t2); push_var(t2); push_app(); t2 = t2 + 5; push_var(t2); push_app(); push_app(); push_app(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); t2 = t2 + 2; push_var(t2); push_var(t2); t2 = t2 + 1; push_var(t2); push_app(); t2 = t2 + 4; push_var(t2); push_app(); push_lam(); push_app(); push_app(); push_lam(); push_app(); push_var(t2); push_var(t2); push_app(); push_lam(); t2 = t2 + 2; push_var(t2); t2 = t2 + 2; push_var(t2); push_var(t2); t2 = t2 + 1; push_var(t2); t2 = t2 + 1; push_var(t2); push_app(); push_app(); t2 = t2 + 3; push_var(t2); t2 = t2 + 4; push_var(t2); push_app(); push_app(); push_app(); push_app(); push_lam(); push_lam(); push_app(); push_app(); push_lam(); push_var(t2); push_var(t2); push_lam(); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_lam(); push_lam(); push_app(); push_lam(); push_var(t2); t2 = t2 + 1; push_var(t2); push_lam(); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_lam(); push_var(t2); push_var(t2); push_app(); push_app(); push_lam(); push_app(); push_app(); push_lam(); push_var(t2); push_var(t2); push_app(); push_lam(); t2 = t2 + 1; push_var(t2); t2 = t2 + 3; push_var(t2); t2 = t2 + 10; push_var(t2); t2 = t2 + 5; push_var(t2); push_app(); t2 = t2 + 2; push_var(t2); push_app(); t2 = t2 + 8; push_var(t2); t2 = t2 + 4; push_var(t2); push_app(); t2 = t2 + 1; push_var(t2); push_app(); push_app(); push_var(t2); push_lam(); push_lam(); push_app(); push_lam(); push_lam(); push_lam(); push_app(); t2 = t2 + 3; push_var(t2); push_app(); push_lam(); push_lam(); push_lam(); push_app(); push_var(t2); t2 = t2 + 4; push_var(t2); push_lam(); push_lam(); push_lam(); push_app(); t2 = t2 + 1; push_var(t2); push_lam(); push_lam(); push_app(); push_app(); push_lam(); push_lam(); push_lam(); push_var(t2); push_var(t2); push_app(); push_app(); push_lam(); push_app(); push_lam(); push_app(); push_app(); push_var(t2); push_app(); push_lam(); t2 = t2 + 1; push_var(t2); t2 = t2 + 1; push_var(t2); t2 = t2 + 1; push_var(t2); push_var(t2); push_app(); push_app(); push_app(); push_lam(); push_lam(); push_app();
        builtin_move(lstacktop, rstacktop);
        /* 1 = (0,0)+1 = eval [] */
        rstacktop = rstacktop + 1;
    }
    /* apply a reduction */
    if(rstacktop == 0){
        /* 0 = quote */
        if(lstacktop != 0){
            /* (Closure e t) # 0 -> Reflect # (2,(e,t))+1 */
            t2 = 2;
            lstacktop = lstacktop - 1;
            pair_inc(rstacktop, t2, lstacktop);
            /* lstacktop = 0 */
        }
        /* Reflect # 0 -> halt is handled elsewhere */
    }else{
        unpair_dec(t2, rstacktop, rstacktop);
        if(t2 == 0){
            /* 0 = eval */
            unpair(t2, lstacktop, lstacktop);
            if(t2 == 0){
                /* (Lam t) # (0,e)+1 -> (Closure e t) # */
                /* lstacktop = t, rstacktop = e */
                pair_inc(lstacktop, rstacktop, lstacktop);
                rstack_pop();
            }elsif(t2 == 1){
                /* (App f x) # (0,e)+1 -> f # (0,e)+1 (1,(e,x))+1 */
                /* lstacktop = (f,x), rstacktop = e */
                unpair(lstacktop, t2, lstacktop);
                /* lstacktop = f, t2 = x */
                t3 = rstacktop;
                pair(t2, t3, t2);
                /* t2 = (e,x) */
                t3 = 1;
                pair_inc(t2, t3, t2);
                pair(rstack, rstack, t2);
                /* rstack = (1,(e,x))+1 ... */
                /* t2 = 0 */
                pair_inc(rstacktop, t2, rstacktop);
                /* rstacktop = (0,e)+1 */
            }else{
                /* (Var n) # (0,e)+1 -> e!!n # */
                /* lstacktop = n, rstacktop = e */
                builtin_move(t2, lstacktop);
                index_list(rstacktop, t2, lstacktop);
                rstack_pop();
            }
        }elsif(t2 == 1){
            /* 1 = vapp eval */
            if(lstacktop == 0){
                /* Reflect # (1,(e,x))+1 -> Reflect # */
                rstack_pop();
            }else{
                /* (Closure e t) # (1,(e',x))+1 -> x # (0,e')+1 (2,(e,t))+1 */
                /* lstacktop = (e,t)+1, rstacktop = (e',x) */
                lstacktop = lstacktop - 1;
                /* lstacktop = (e,t) */
                t2 = 2;
                pair_inc(t2, t2, lstacktop);
                /* t2 = (2,(e,t))+1 */
                pair(rstack, rstack, t2);
                /* rstack = (2,(e,t))+1 ... */
                /* t2 = 0 */
                unpair(rstacktop, lstacktop, rstacktop);
                /* lstacktop = x, rstacktop = e' */
                pair_inc(rstacktop, t2, rstacktop);
                /* rstacktop = (0,e')+1 */
            }
        }else{
            /* 2 = vapp Closure */
            /* x # (2,(e,t))+1 -> t # (0,(x,e))+1 */
            /* lstacktop = x, rstacktop = (e,t) */
            builtin_move(t2, lstacktop);
            /* t2 = x */
            unpair(rstacktop, lstacktop, rstacktop);
            /* lstacktop = t, rstacktop = e */
            pair(rstacktop, t2, rstacktop);
            /* rstacktop = (x,e) */
            /* t2 = 0 */
            pair_inc(rstacktop, t2, rstacktop);
            /* rstacktop = (0,(x,e))+1 */
        }
    }
    /* done? */
    stackszero();
    if(t2 == 0){
        return;
    }
}